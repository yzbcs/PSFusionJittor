import matplotlib.pyplot as plt
import json
# data={
#     "train_losses": [5.3933, 2.4156, 3.5556, 2.8403, 2.8696, 4.0439, 3.2531999999999996, 2.8008, 3.261, 3.268, 3.1252, 4.3978, 3.3607, 3.6592000000000002, 2.5340999999999996, 3.6647, 2.807, 2.504, 3.6426, 3.05, 3.9831, 3.3251, 3.6356, 3.4502, 2.2346, 2.788, 2.3853999999999997, 2.5539, 4.071, 2.965, 2.3917, 4.336, 4.048, 2.8855000000000004, 3.6003, 2.6199, 2.6908, 3.6548, 2.4869, 2.416, 3.0316, 3.0576999999999996, 3.1713999999999998, 2.596, 1.9134, 2.7443999999999997, 2.2579000000000002, 3.2477, 2.7215, 2.0021, 2.8308, 2.4328000000000003, 2.6187, 2.6064, 2.5122, 4.3065, 3.2064000000000004, 3.4326999999999996, 3.3017000000000003, 1.9369999999999998, 3.3618, 2.587, 2.8204000000000002, 2.1555999999999997, 2.7248, 2.2124, 2.1381, 2.2798, 2.4969, 2.2707, 3.1789, 2.4043, 3.5667, 2.0242, 2.7302, 2.1989, 3.5232, 2.8667000000000002, 3.0468, 2.4388, 2.0443000000000002, 3.3051000000000004, 3.1917, 2.3971, 2.0009, 3.6895, 2.0796, 2.795, 3.6055, 2.1201, 2.5414, 2.6085000000000003, 4.0521, 2.4019, 2.5376000000000003, 2.489, 2.6799999999999997, 2.3578, 3.0536, 2.7438],
#     "train_fusion_losses": [2.8692, 1.6651, 2.3889, 2.3317, 2.1661, 2.4446, 2.8021, 2.1878, 2.3105, 2.0517, 2.1318, 2.3789, 1.8633, 3.1316, 2.1028, 2.8425, 1.8428, 1.8424, 2.2637, 2.643, 2.5391, 2.2367, 2.6579, 2.4678, 1.5328, 1.8234, 1.8775, 2.0187, 1.9319, 2.1856, 1.6007, 2.0097, 2.3793, 1.6262, 2.1951, 1.9678, 2.1584, 2.3436, 1.7438, 1.6626, 2.0067, 2.485, 2.1508, 2.1261, 1.4631, 1.8294, 1.8427, 2.5439, 2.1691, 1.3852, 1.8556, 1.7452, 1.6055, 1.3429, 2.1505, 2.7513, 1.8726, 2.4831, 1.4899, 1.3657, 2.193, 2.1379, 2.0526, 1.7284, 1.6056, 1.8166, 1.5581, 1.399, 1.6642, 1.7515, 2.2435, 1.5538, 1.9597, 1.6105, 1.8654, 1.3607, 2.36, 2.0264, 1.2737, 1.6534, 1.3418, 1.7393, 2.1644, 1.6436, 1.5642, 1.9648, 1.5476, 1.9942, 1.852, 1.3513, 1.9315, 2.0428, 2.0833, 1.9521, 1.6906, 2.0652, 2.0483, 1.38, 2.2121, 1.7308],
#     "train_seg_losses": [2.5241, 0.7505, 1.1667, 0.5086, 0.7035, 1.5993, 0.4511, 0.613, 0.9505, 1.2163, 0.9934, 2.0189, 1.4974, 0.5276, 0.4313, 0.8222, 0.9642, 0.6616, 1.3789, 0.407, 1.444, 1.0884, 0.9777, 0.9824, 0.7018, 0.9646, 0.5079, 0.5352, 2.1391, 0.7794, 0.791, 2.3263, 1.6687, 1.2593, 1.4052, 0.6521, 0.5324, 1.3112, 0.7431, 0.7534, 1.0249, 0.5727, 1.0206, 0.4699, 0.4503, 0.915, 0.4152, 0.7038, 0.5524, 0.6169, 0.9752, 0.6876, 1.0132, 1.2635, 0.3617, 1.5552, 1.3338, 0.9496, 1.8118, 0.5713, 1.1688, 0.4491, 0.7678, 0.4272, 1.1192, 0.3958, 0.58, 0.8808, 0.8327, 0.5192, 0.9354, 0.8505, 1.607, 0.4137, 0.8648, 0.8382, 1.1632, 0.8403, 1.7731, 0.7854, 0.7025, 1.5658, 1.0273, 0.7535, 0.4367, 1.7247, 0.532, 0.8008, 1.7535, 0.7688, 0.6099, 0.5657, 1.9688, 0.4498, 0.847, 0.4238, 0.6317, 0.9778, 0.8415, 1.013],
#     "val_mious": [0.1045, 0.1066, 0.1099, 0.1106, 0.1104, 0.1139, 0.1135, 0.1166, 0.1218, 0.1181, 0.1263, 0.1251, 0.1312, 0.1349, 0.1305, 0.1432, 0.135, 0.144, 0.1475, 0.1493, 0.1526, 0.1487, 0.152, 0.1588, 0.1567, 0.1589, 0.1671, 0.1622, 0.1693, 0.1681, 0.1697, 0.1775, 0.1705, 0.1714, 0.1761, 0.1712, 0.1841, 0.1819, 0.1853, 0.1865, 0.1863, 0.1792, 0.1898, 0.188, 0.1888, 0.2032, 0.1955, 0.2038, 0.2086, 0.2051, 0.212, 0.214, 0.2134, 0.2196, 0.2153, 0.2198, 0.2187, 0.2215, 0.2247, 0.2325, 0.2327, 0.2316, 0.2257, 0.2423, 0.241, 0.2327, 0.2462, 0.2471, 0.25, 0.2495, 0.2545, 0.2463, 0.256, 0.257, 0.2539, 0.2584, 0.2555, 0.2655, 0.2721, 0.2677, 0.2715, 0.2745, 0.2743, 0.2856, 0.2818, 0.2892, 0.2796, 0.2914, 0.2915, 0.2923, 0.2929, 0.298, 0.298, 0.3096, 0.3191, 0.3176, 0.3206, 0.3177, 0.3277, 0.3206],
#     "val_accs": [0.8756, 0.892, 0.8954, 0.8994, 0.8946, 0.8914, 0.8921, 0.8983, 0.8938, 0.8926, 0.8932, 0.9021, 0.8975, 0.8979, 0.8999, 0.9015, 0.9008, 0.9053, 0.9035, 0.9047, 0.9027, 0.9058, 0.9056, 0.9049, 0.9078, 0.9081, 0.9086, 0.9055, 0.9108, 0.909, 0.9092, 0.9142, 0.9091, 0.9085, 0.9174, 0.9177, 0.9158, 0.9171, 0.9169, 0.9147, 0.914, 0.9145, 0.9196, 0.9135, 0.9181, 0.9208, 0.9195, 0.921, 0.9204, 0.9227, 0.9205, 0.925, 0.9195, 0.924, 0.9238, 0.9275, 0.9281, 0.9257, 0.9255, 0.9304, 0.9264, 0.9286, 0.9251, 0.9279, 0.9297, 0.9308, 0.9302, 0.9306, 0.9312, 0.9347, 0.9323, 0.9332, 0.9331, 0.934, 0.9335, 0.937, 0.9357, 0.9351, 0.9387, 0.9387, 0.9364, 0.9377, 0.9387, 0.9407, 0.941, 0.9428, 0.9428, 0.9418, 0.9447, 0.9463, 0.9464, 0.9445, 0.9434, 0.9469, 0.9466, 0.947, 0.9467, 0.9486, 0.9496, 0.9505],
#     "epochs": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
# }
data={
   "train_losses": [3.4641, 3.8188, 2.6597, 3.7822, 3.5715000000000003, 3.58, 5.7605, 2.8313, 3.2738000000000005, 4.2797],
   "train_fusion_losses": [2.8178, 3.1479, 2.2458, 3.2268, 2.0779, 2.8513, 2.744, 1.9028, 2.1272, 3.7031],
   "train_seg_losses": [0.6463, 0.6709, 0.4139, 0.5554, 1.4936, 0.7287, 3.0165, 0.9285, 1.1466, 0.5766],
   "val_mious": [0.1084, 0.116, 0.1147, 0.1216, 0.1347, 0.1465, 0.1451, 0.1576, 0.1615, 0.1704],
   "val_accs": [0.8734, 0.8914, 0.8919, 0.8938, 0.8969, 0.8992, 0.9039, 0.9007, 0.9071, 0.9109],
   "epochs": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
}
# data={
#      "train_losses": [1.6125, 1.6037, 1.5884, 1.5663, 1.5328, 1.5471, 1.4965, 1.4227, 1.4319, 1.3734],
#      "train_fusion_losses": [1.0413, 1.0298, 1.0092, 0.9887, 0.9593, 0.9715, 0.9184, 0.8796, 0.8873, 0.8421],
#      "train_seg_losses": [0.5712, 0.5739, 0.5792, 0.5776, 0.5735, 0.5756, 0.5781, 0.5431, 0.5446, 0.5313],
#      "val_losses": [1.6947, 1.7013, 1.6586, 1.6194, 1.5872, 1.6025, 1.5283, 1.4976, 1.4651, 1.4268],
#      "val_mious": [0.1027, 0.0983, 0.1125, 0.1247, 0.1316, 0.1284, 0.1379, 0.1398, 0.1352, 0.1400],
#      "val_accs": [0.9243, 0.9201, 0.9257, 0.9286, 0.9315, 0.9273, 0.9294, 0.9302, 0.9267, 0.9301],
#      "epochs": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# }

# 设置绘图风格
plt.style.use('ggplot')

# 创建图形：损失函数
plt.figure(figsize=(14, 5))

# 子图1：Loss 曲线
plt.subplot(1, 2, 1)
plt.plot(data["epochs"], data["train_losses"], label="Train Total Loss", marker='o')
plt.plot(data["epochs"], data["train_fusion_losses"], label="Train Fusion Loss", marker='s')
plt.plot(data["epochs"], data["train_seg_losses"], label="Train Segmentation Loss", marker='^')

plt.title("Training Losses")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()
plt.grid(True)

# 子图2：mIoU & Accuracy 曲线
plt.subplot(1, 2, 2)
plt.plot(data["epochs"], data["val_mious"], label="Validation mIoU", marker='d', color='green')
plt.plot(data["epochs"], data["val_accs"], label="Validation Accuracy", marker='*', color='purple')

plt.title("Validation Metrics")
plt.xlabel("Epoch")
plt.ylabel("Metric Value")
plt.legend()
plt.grid(True)

# 自动调整布局并显示图像
plt.tight_layout()
# plt.savefig("training_metrics_epoch_100(pytorch).png", dpi=300)
plt.savefig("training_metrics_epoch_10(pytorch).png", dpi=300)
# plt.savefig("training_metrics_epoch_10(jittor).png", dpi=300)
plt.show()